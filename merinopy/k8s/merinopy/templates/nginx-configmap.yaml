apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "application.fullname" . }}-nginx
  labels:
    app.kubernetes.io/name: {{ template "application.name" . }}
    app.kubernetes.io/version: {{ .Values.appVersion }}
    app.kubernetes.io/instance: {{ .Values.environment }}
    app.kubernetes.io/component: app
    app.kubernetes.io/part-of: {{ template "application.name" . }}
    app.kubernetes.io/managed-by: {{ .Values.managedBy }}
data:
  nginx.conf: |
    user  nginx;

    # The nginx docker container has ln -sf /dev/stderr /var/log/nginx/error.log
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  2048;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format main escape=json
        '{'
          '"time":"$time_local",'
          '"remote_addr":"$remote_addr",'
          '"remote_user":"$remote_user",'
          '"request":"$request",'
          '"status": "$status",'
          '"log_type": "access",'
          '"bytes_sent": $body_bytes_sent,'
          '"request_time": $request_time,'
          '"referrer":"$http_referer",'
          '"user_agent":"$http_user_agent",'
          '"x_forwarded_for":"$http_x_forwarded_for",'
          '"x_forwarded_proto":"$http_x_forwarded_proto",'
          '"trace":"$http_x_cloud_trace_context"'
        '}';

        # The nginx docker container has ln -sf /dev/stdout /var/log/nginx/access.log
        access_log  off;

        sendfile        on;

        keepalive_timeout  620;

        server_tokens off;

        gzip on;
        gzip_http_version 1.1;
        gzip_comp_level 1;
        gzip_vary on;
        gzip_proxied any;
        gzip_disable "MSIE [1-6]\.(?!.*SV1)";
        gzip_min_length 1100;
        gzip_types
            text/plain
            text/css
            application/json
            application/x-javascript
            text/xml
            application/xml
            application/xml+rss
            text/javascript
            application/javascript;

        upstream upstream_docker {
            server 127.0.0.1:8000;
        }
        server {
            listen 80;

            client_max_body_size 2g;

            # Health checks don't send an x-forwarded-proto header and we need to make sure they don't get infinite redirects
            if ($http_x_forwarded_proto = 'http') {
                return 302 {{ .Values.baseUrl }}$request_uri;
            }

            add_header Strict-Transport-Security "max-age=31536000" always;

            # use the value of x-forwarded-for as the client address
            real_ip_header X-Forwarded-For;
            real_ip_recursive on;
            # only trust x-forwarded-for from within the cluster
            # cluster subnet
            set_real_ip_from 10.0.0.0/8;
            # These ranges are taken from: https://cloud.google.com/load-balancing/docs/health-checks#fw-rule
            set_real_ip_from 130.211.0.0/22;
            set_real_ip_from 35.191.0.0/16;

            location / {
                proxy_set_header x-forwarded-proto $http_x_forwarded_proto;
                proxy_set_header x-forwarded-for $remote_addr;
                proxy_set_header Host $http_host;
                proxy_redirect off;

                proxy_pass http://upstream_docker;
            }

            location = /nginx_status {
              stub_status on;
              access_log off;
              allow 127.0.0.1;
              deny all;
            }

            location = /__nginxheartbeat__ {
              return 200;
            }
        }
    }
